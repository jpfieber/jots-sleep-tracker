import esbuild from "esbuild";
import process from "process";
import fs from "fs/promises";
import { watch } from "fs";

const banner =
    `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === 'production');

// Function to copy styles to dist
async function copyStyles() {
    try {
        await fs.copyFile('src/styles/styles.css', 'dist/styles.css');
        console.log('CSS file copied successfully');
    } catch (err) {
        console.error('Error copying CSS file:', err);
    }
}

const buildOptions = {
    banner: {
        js: banner,
    },
    entryPoints: ['src/main.ts'],
    bundle: true,
    external: ['obsidian'],
    format: 'cjs',
    target: 'es2016',
    logLevel: "info",
    sourcemap: prod ? false : 'inline',
    treeShaking: true,
    outfile: 'dist/main.js',
};

if (process.argv[2] === '--watch') {
    // Watch mode
    buildOptions.watch = {
        onRebuild(error, result) {
            if (error) console.error('watch build failed:', error);
            else console.log('watch build succeeded');
        },
    };

    // Build with watch mode
    esbuild.build(buildOptions).then(result => {
        console.log('watching...');

        // Watch the CSS file
        watch('src/styles', async (eventType, filename) => {
            if (filename === 'styles.css') {
                await copyStyles();
                console.log('CSS updated');
            }
        });
    });
} else {
    // Single build
    await esbuild.build(buildOptions);
    await copyStyles();
}